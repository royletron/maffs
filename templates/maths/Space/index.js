import { useMemo } from "react";
import styles from "./styles.module.css";
import { useTransition, animated } from "react-spring";
import arrayShuffle from "utils/arrays/shuffle";

export const Frame = ({ children, ...props }) => {
  return <div className={styles.frame}>{children}</div>;
};

export const Select = ({ children, onClick }) => {
  const { delay, duration } = useMemo(
    () => ({
      delay: Math.floor(Math.random() * 20) / 10,
      duration: 6 + Math.floor(Math.random() * 30) / 10,
    }),
    []
  );
  return (
    <div
      className={styles.option}
      style={{ animationDelay: `${delay}s`, animationDuration: `${duration}s` }}
    >
      <svg
        onClick={onClick}
        width="217"
        height="314"
        viewBox="0 0 217 314"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <g>
          <path
            d="M42.8377 156.988L1.37903 202.186C1.37903 202.186 18.7792 222.596 38.4714 207.829L67.0114 182.236L42.8377 156.988Z"
            fill="#FDB515"
          />
          <path
            d="M56.5848 197.003L70.0151 184.912L42.9555 162.743L40.2799 165.746C43.22 177.378 48.6262 188.599 56.5848 197.003Z"
            fill="#F47D20"
          />
          <path
            d="M40.28 165.746L4.45826 205.072C4.45826 205.072 21.8854 223.572 41.5506 210.715L56.6722 197.114C48.6262 188.599 43.22 177.378 40.28 165.746Z"
            fill="#F78D1E"
          />
          <path
            d="M185.974 172.792L170.99 156.598L146.926 181.82L175.603 207.305C179.115 209.94 182.571 211.36 185.8 212.149C189.381 199.888 188.064 185.631 185.974 172.792Z"
            fill="#F78D1E"
          />
          <path
            d="M185.974 172.792C188.164 185.642 189.381 199.888 185.8 212.149C200.913 215.467 212.647 201.561 212.647 201.561L185.974 172.792Z"
            fill="#FDB515"
          />
          <path
            d="M187.029 179.968L170.897 162.429L143.953 184.788L172.63 210.273C176.936 213.003 181.012 214.296 184.896 214.66C188.772 204.145 188.544 191.731 187.029 179.968Z"
            fill="#E26A1F"
          />
          <path
            d="M209.574 204.518L187.029 179.968C188.544 191.731 188.783 204.046 184.896 214.66C198.944 215.936 209.574 204.518 209.574 204.518Z"
            fill="#F78D1E"
          />
          <path
            d="M144.238 138.595C144.572 138.333 144.917 137.972 145.251 137.709C139.036 139.988 132.807 144.077 127.872 149.127C133.737 146.404 139.188 142.927 144.238 138.595Z"
            fill="#CF551C"
          />
          <path
            d="M155.361 135.695C152.136 135.713 148.729 136.413 145.362 137.622C145.028 137.884 144.683 138.246 144.349 138.508C139.299 142.839 133.848 146.317 127.983 149.04C122.124 155.087 118.132 162.364 118.107 169.311C118.078 175.45 123.782 186.707 127.144 191.44C147.075 186.471 169.566 168.514 179.022 150.912C173.507 144.814 164.118 135.735 155.361 135.695Z"
            fill="#CF551C"
          />
          <path
            d="M43.4831 143.167C40.1719 145.591 37.123 148.349 34.9278 150.705C44.5507 168.775 66.338 186.184 86.5593 191.422C89.8575 186.579 96.2348 175.357 96.1765 169.106C96.2023 164.677 94.6158 160.258 92.1755 156.24C75.5904 155.969 58.5228 151.31 43.4831 143.167Z"
            fill="#CF551C"
          />
          <path
            d="M59.1519 136.782C54.0167 136.772 48.3386 139.618 43.4949 143.068C58.5346 151.211 75.5903 155.969 92.2748 156.252C85.431 145.261 71.2332 136.816 59.1519 136.782Z"
            fill="#E26A1F"
          />
          <path
            d="M90.5827 192.306L94.1435 215.593L118.628 215.499L122.375 192.582L90.5827 192.306Z"
            fill="#00505B"
          />
          <path
            d="M118.462 8.87269L115.732 8.25433L109.062 37.7078L111.793 38.3262L118.462 8.87269Z"
            fill="#FDB515"
          />
          <path
            d="M100.128 38.2717L102.856 37.6404L96.048 8.21804L93.32 8.84929L100.128 38.2717Z"
            fill="#FDB515"
          />
          <path
            d="M126.254 43.8907C126.244 49.0259 122.123 53.166 116.976 53.2556L94.9105 53.3368C89.7754 53.3271 85.6352 49.2065 85.5456 44.0595C85.5553 38.9243 89.6759 34.7842 94.8229 34.6946L116.889 34.6134C122.123 34.635 126.263 38.7556 126.254 43.8907Z"
            fill="#F78D1E"
          />
          <path
            d="M99.3503 6.93568C99.3794 10.0612 96.8507 12.6796 93.6378 12.5976C90.5122 12.6267 87.8938 10.098 87.9758 6.88503C87.9466 3.75947 90.4635 1.24045 93.6883 1.22315C96.802 1.29327 99.3211 3.81011 99.3503 6.93568Z"
            fill="#FDB515"
          />
          <path
            d="M123.835 6.84161C123.864 9.96717 121.335 12.5855 118.122 12.5035C114.996 12.5327 112.477 10.0158 112.46 6.79098C112.431 3.66541 114.948 1.14639 118.173 1.12909C121.286 1.19922 123.805 3.71604 123.835 6.84161Z"
            fill="#FDB515"
          />
          <path
            d="M34.9277 150.705C37.5913 147.8 40.704 145.352 44.2418 143.56C38.4698 140.453 33.0551 136.885 27.9857 132.955C29.6565 139.197 31.9705 145.114 34.9277 150.705Z"
            fill="#43BEAD"
          />
          <path
            d="M188.588 112.173C188.547 90.616 180.096 73.6932 166.401 61.8839C166.859 63.9529 167.329 65.9225 167.798 67.8922C173.648 94.7767 163.255 122.741 144.238 138.595C128.509 152.224 108.257 157.357 87.6598 156.103C90.6009 160.986 92.2317 166.72 92.3019 172.872C92.2771 179.818 90.2028 186.217 86.6467 191.533C93.1924 193.222 100.131 194.152 107.288 194.101C114.135 194.114 120.791 193.198 127.12 191.638C123.421 186.362 121.178 179.85 121.203 172.903C121.167 154.67 135.922 139.918 154.056 139.87C164.029 139.854 172.871 144.234 178.986 151.21C185.125 139.455 188.614 126.276 188.588 112.173Z"
            fill="#39A597"
          />
          <path
            d="M144.238 138.595C163.255 122.741 173.648 94.7767 167.798 67.8922C167.329 65.9225 166.859 63.9529 166.401 61.8839C151.523 49.0267 130.276 42.2566 106.796 42.3702C61.7596 42.5249 25.2287 67.5653 25.3835 112.602C25.3468 119.648 26.3506 126.415 27.9858 132.955C33.0433 136.984 38.458 140.552 44.2418 143.56C48.7445 141.278 53.8354 139.973 59.2803 139.919C71.3736 139.854 81.9763 146.359 87.7591 156.115C108.257 157.357 128.509 152.224 144.238 138.595Z"
            fill="#43BEAD"
          />
          <path
            d="M200.606 93.367C138 94.7447 75.0513 94.7723 12.798 94.8829C12.8703 96.8051 14.4039 98.2977 16.2268 98.2135L197.355 97.8126C199.265 97.8395 200.758 96.3059 200.785 94.3955C200.833 93.9984 200.769 93.6886 200.606 93.367Z"
            fill="#2C8C80"
          />
          <path
            d="M197.368 90.9656L16.2397 91.3665C14.3294 91.3396 12.8368 92.8732 12.8098 94.7835C12.8098 94.7835 12.8098 94.7836 12.798 94.8828C75.0513 94.7722 138.011 94.6454 200.606 93.367C200.164 92.0049 198.881 90.9451 197.368 90.9656Z"
            fill="#359E90"
          />
          <path
            d="M192.437 103.569L19.9666 103.998C18.1555 103.983 16.6629 105.517 16.7352 107.439C16.7233 107.538 16.7116 107.638 16.799 107.749C76.4545 106.623 135.984 107.395 195.651 106.169C195.222 104.708 194.049 103.561 192.437 103.569Z"
            fill="#359E90"
          />
          <path
            d="M195.651 106.169C135.984 107.395 76.4545 106.623 16.7989 107.749C16.9943 109.484 18.3412 110.854 20.0529 110.857L192.523 110.428C194.334 110.443 195.827 108.91 195.755 106.987C195.79 106.69 195.727 106.38 195.651 106.169Z"
            fill="#2C8C80"
          />
          <path
            d="M148.37 59.5005C134.558 49.5593 117.416 44.3518 99.2194 46.3212C98.0285 46.3762 96.8143 46.6258 95.6002 46.8754C56.9811 52.9167 30.7279 89.2538 36.7692 127.873C37.3002 131.687 38.2436 135.352 39.4049 138.846C42.8887 149.329 48.6758 158.706 56.0579 166.299C71.5307 182.163 94.231 190.404 117.767 186.704C156.386 180.663 182.639 144.326 176.598 105.707C173.577 86.3971 163.062 70.3365 148.37 59.5005Z"
            fill="#39A597"
          />
          <path
            d="M113.796 148.925C123.779 143.013 135.1 132.523 139.827 121.048C145.805 102.42 145.953 84.6735 141.874 67.606C130.234 59.3061 115.724 55.2028 100.734 56.7661C99.7376 56.8443 98.7413 56.9226 97.7218 57.1955C64.7376 62.3314 42.2956 93.2028 47.6261 126.21C48.2269 129.44 48.8278 132.67 49.8642 135.557C52.3348 142.958 56.0893 149.526 60.7385 155.214C77.0403 162.492 99.1207 159.408 113.796 148.925Z"
            fill="#00505B"
          />
          <path
            d="M142.217 68.0418C142.046 67.8239 141.851 67.8006 141.485 67.5595C145.758 84.6502 145.416 102.373 139.438 121.002C134.688 132.671 123.39 142.966 113.407 148.878C98.7318 159.361 76.8458 162.469 59.9602 155.121C60.9882 156.428 62.0395 157.54 63.2621 158.871C76.4609 172.292 95.7284 179.53 115.84 176.407C148.824 171.271 171.266 140.4 166.13 107.416C163.756 90.947 154.76 77.0418 142.217 68.0418Z"
            fill="#004049"
          />
          <path
            d="M108.925 224.209L108.072 308C108.072 308 57.1127 223.755 108.925 224.209Z"
            fill="#FFC40C"
          />
          <path
            d="M108.925 224.209L108.072 308C108.072 308 160.726 224.762 108.925 224.209Z"
            fill="#FDB515"
          />
          <path
            d="M108.925 224.209L108.482 273.404C108.47 273.503 78.4357 223.988 108.925 224.209Z"
            fill="#F37321"
          />
          <path
            d="M108.925 224.209L108.482 273.404C108.47 273.503 139.303 224.517 108.925 224.209Z"
            fill="#F15D22"
          />
        </g>
        <text x="109" y="136" textAnchor="middle">
          {children}
        </text>
      </svg>
    </div>
  );
};

export default function SpaceTheme({
  equation,
  values,
  correct,
  onSelect,
  showSummary = false,
  summary,
}) {
  const transitions = useTransition(showSummary, null, {
    from: {
      opacity: 0,
      position: "absolute",
      transform: "scale(0.9)",
    },
    enter: [
      {
        opacity: 1,
        transform: "scale(1)",
      },
    ],
    leave: { opacity: 0 },
  });
  return (
    <Frame>
      {transitions.map(({ item, key, props }) =>
        item ? (
          <animated.div key={key} style={props} className={styles.content}>
            <div className={styles.summary}>{summary}</div>
          </animated.div>
        ) : (
          <animated.div key={key} style={props} className={styles.content}>
            <div className={styles.question}>
              <svg viewBox="0 0 60 14">
                <text
                  x="30"
                  y="12"
                  textAnchor="middle"
                  dangerouslySetInnerHTML={{ __html: equation }}
                ></text>
              </svg>
            </div>
            <div className={styles.values}>
              {values.map((value) => (
                <Select key={`select_${value}`} onClick={() => onSelect(value)}>
                  {value}
                </Select>
              ))}
            </div>
          </animated.div>
        )
      )}
    </Frame>
  );
}
